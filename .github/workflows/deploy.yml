name: Deploy RAG Telegram Bot

# Запускать воркфлоу при пуше в ветку main
on:
  push:
    branches:
      - main

# Переменные окружения, доступные во всех задачах
env:
  # Имя репозитория для имени Docker-образа
  IMAGE_NAME: ${{ github.repository }}

jobs:
  ########################################
  # ЗАДАЧА 1: Сборка и публикация образа #
  ########################################
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest # Используем свежую Ubuntu для сборки

    permissions:
      contents: read # Нужны права на чтение репозитория
      packages: write # Нужны права на запись в GitHub Packages (GHCR)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }} # Этот секрет создается автоматически

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  ########################################
  # ЗАДАЧA 2: Развертывание на сервере  #
  ########################################
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build-and-push # Эта задача запустится только после успешной сборки

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22 # Порт SSH по умолчанию
          script: |
            # Переходим в домашнюю директорию
            cd ~

            # Логинимся в GHCR
            echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ secrets.GHCR_USER }} --password-stdin

            # Скачиваем последнюю версию образа
            docker pull ghcr.io/${{ env.IMAGE_NAME }}:main

            # Останавливаем и удаляем старый контейнер, если он существует
            if [ "$(docker ps -q -f name=rag-bot)" ]; then
                docker stop rag-bot
                docker rm rag-bot
            fi

            # Создаем файл .env из секрета
            # Важно: `>` перезапишет файл, что нам и нужно при каждом деплое
            echo "${{ secrets.ENV_FILE_CONTENT }}" > .env

            # Создаем файл credentials.json из секрета
            echo "${{ secrets.GDRIVE_CREDENTIALS }}" > credentials.json

            # Создаем директории для монтирования, если их нет
            mkdir -p ./vector_storage
            mkdir -p ./logs
            mkdir -p ./downloaded_files

            # Запускаем новый контейнер
            docker run -d \
              --name rag-bot \
              --restart unless-stopped \
              --env-file ./.env \
              -v $(pwd)/vector_storage:/app/vector_storage \
              -v $(pwd)/logs:/app/logs \
              -v $(pwd)/downloaded_files:/app/downloaded_files \
              -v $(pwd)/credentials.json:/app/credentials.json \
              ghcr.io/${{ env.IMAGE_NAME }}:main 